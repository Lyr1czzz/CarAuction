@model CarAuction.Controllers.AuctionController.AuctionViewModel

<h1>Current Auction</h1>

<div id="currentLot">
    <h2>Lot: @Model.CurrentLot.Vehicle.Make.Name @Model.CurrentLot.Vehicle.Model.Name</h2>
    <img src="@Model.CurrentLot.Vehicle.Images.FirstOrDefault().ImagePath" alt="Vehicle Image">
    
    <p>Текущая ставка: <span id="currentBid">@Model.CurrentBid</span></p>
    <p>Оставшееся время: <span id="timer"> sec</span></p>
    <button onclick="sendBid(@Model.CurrentLot.Id, 50)">Повысить ставку</button>
</div>

<div id="nextLots">
    <h3>Upcoming Lots:</h3>
    <ul>
        @foreach (var lot in Model.NextLots)
        {
            <li>@lot.Vehicle.Make.Name @lot.Vehicle.Model.Name</li>
        }
    </ul>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/Details") // Укажи путь к хабу
            .build();

        // Получаем элементы из HTML
        const currentBidElement = document.getElementById("currentBid");
        const timerElement = document.getElementById("timer");
        const currentLotElement = document.getElementById("currentLot");
        const nextLotsElement = document.getElementById("nextLots");

        // Обработчик события BidSubmitted
        connection.on("BidSubmitted", (lotId, bidAmount) => {
            currentBidElement.textContent = bidAmount; // Обновляем текущую ставку
        });

        // Обработчик события TimerStarted
        connection.on("TimerStarted", (lotId) => {
            // Запускаем таймер с обратным отсчетом от 10 секунд
            let remainingTime = 10;
            timerElement.textContent = remainingTime;
            const timerInterval = setInterval(() => {
                remainingTime--;
                timerElement.textContent = remainingTime;
                if (remainingTime === 0) {
                    clearInterval(timerInterval);
                }
            }, 1000);
        });

        // Обработчик события TimerUpdated
        connection.on("TimerUpdated", (lotId, remainingTime) => {
            timerElement.textContent = remainingTime; // Обновляем оставшееся время
        });

        // Обработчик события LotSold
        connection.on("LotSold", (soldLot, nextLot) => {
            // Обновляем информацию о текущем лоте
            // ... (логика для отображения информации о nextLot)
        });

        connection.start().then(() => {
            // После успешного подключения
        }).catch(err => console.error(err.toString()));

        // Функция для отправки ставки на сервер
        function sendBid(lotId, bidAmount) {
            connection.invoke("SendBid", lotId, bidAmount)
                .catch(err => console.error(err.toString()));
        }
    </script>
}