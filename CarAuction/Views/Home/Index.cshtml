@model CarAuction.Models.ViewModels.HomeVM

<div class="container">
    <div class="row">
        <div class="col-md-3 mb-3">
            <div class="accordion" id="filterAccordion">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="priceHeading">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#priceCollapse" aria-expanded="false" aria-controls="priceCollapse">
                            Price Range
                        </button>
                    </h2>
                    <div id="priceCollapse" class="accordion-collapse collapse" aria-labelledby="priceHeading">
                        <div class="accordion-body">
                            <label for="priceRangeMin" class="form-label">Min Price: <span id="minPriceLabel">0</span></label>
                            <input type="range" class="form-range" min="0" max="50000" id="priceRangeMin" value="0">

                            <label for="priceRangeMax" class="form-label">Max Price: <span id="maxPriceLabel">50,000</span></label>
                            <input type="range" class="form-range" min="0" max="50000" id="priceRangeMax" value="50000">
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="makeHeading">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#makeCollapse" aria-expanded="true" aria-controls="makeCollapse">
                            Makes
                        </button>
                    </h2>
                    <div id="makeCollapse" class="accordion-collapse collapse show" aria-labelledby="makeHeading">
                        <div class="accordion-body">
                            <input type="text" id="makeSearchInput" class="form-control mb-2" placeholder="Search makes">
                            <div class="list-group overflow-auto" style="max-height: 200px;">
                                @foreach (var make in Model.Makes)
                                {
                                    <div class="list-group-item border-0">
                                        <input class="form-check-input me-1" type="checkbox" id="@make.Name.Replace(' ', '_')" value="@make.Name.Replace(' ', '_')">
                                        <label class="form-check-label" for="@make.Name.Replace(' ', '_')">@make.Name</label>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="modelHeading">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#modelCollapse" aria-expanded="false" aria-controls="modelCollapse">
                            Models
                        </button>
                    </h2>
                    <div id="modelCollapse" class="accordion-collapse collapse" aria-labelledby="modelHeading">
                        <div class="accordion-body">
                            <input type="text" id="modelSearchInput" class="form-control mb-2" placeholder="Search models">
                            <div class="list-group overflow-auto" style="max-height: 200px;">
                                @foreach (var item in Model.Models)
                                {
                                    <div class="list-group-item border-0">
                                        <input class="form-check-input me-1" type="checkbox" id="@item.Name.Replace(' ', '_')" value="@item.Name.Replace(' ', '_')">
                                        <label class="form-check-label" for="@item.Name.Replace(' ', '_')">@item.Name</label>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <!-- зкшсу-->
                
                <!-- Add more accordion items here for additional filters if needed -->
            </div>
        </div>

        <div class="col-md-9">
            <div class="row">
                @foreach (var obj in Model.Vehicles)
                {
                    <partial name="_IndividualVehicleCard" model="obj" />
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Функция фильтрации списка на основе ввода пользователя
        function filterList(searchInputSelector, listSelector) {
            var searchValue = $(searchInputSelector).val().toLowerCase();
            $(listSelector + " .list-group-item").each(function () {
                var itemName = $(this).text().trim().toLowerCase();
                if (itemName.indexOf(searchValue) !== -1) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        }

        $(document).ready(function () {
            // Привязываем функцию filterList к событию 'input' для полей поиска
            $("#makeSearchInput").on("input", function () {
                filterList("#makeSearchInput", "#makeCollapse .list-group");
            });

            $("#modelSearchInput").on("input", function () {
                filterList("#modelSearchInput", "#modelCollapse .list-group");
            });

            // ... Оставшийся код обработчиков событий ...
        });

        $(document).ready(function () {
            function filterList() {
                // Получаем выбранные значения фильтров
                // Собираем выбранные марки
                var checkedMakes = $('#makeCollapse .form-check-input:checked').map(function () {
                    return $(this).val();
                }).get();

                // Собираем выбранные модели
                var checkedModels = $('#modelCollapse .form-check-input:checked').map(function () {
                    return $(this).val();
                }).get();

                // Применяем фильтрацию к карточкам
                $(".filter").each(function () {
                    var makeMatch = !checkedMakes.length || checkedMakes.some(make => $(this).hasClass(make));
                    var modelMatch = !checkedModels.length || checkedModels.some(model => $(this).hasClass(model));

                    // Решаем, показывать карточку или скрыть
                    $(this).toggle(makeMatch && modelMatch);
                });
            }

            // Привязываем функцию фильтрации к событию 'change' каждого флажка
            $('#makeCollapse .form-check-input, #modelCollapse .form-check-input').on('change', filterList);
        });

        $(document).ready(function () {
            var $min = $('#priceRangeMin');
            var $max = $('#priceRangeMax');
            var $minLabel = $('#minPriceLabel');
            var $maxLabel = $('#maxPriceLabel');

            function updateLabels() {
                $minLabel.text(parseInt($min.val()).toLocaleString());
                $maxLabel.text(parseInt($max.val()).toLocaleString());
            }

            function filterList() {
                // Получаем выбранные значения фильтров (марки и модели) ...

                // Получаем диапазон цен из ползунков
                var minPrice = parseInt($min.val(), 10);
                var maxPrice = parseInt($max.val(), 10);

                // Обновляем значения меток минимальной и максимальной цены
                updateLabels();

                // Применяем фильтрацию к карточкам
                $(".filter").each(function () {
                    // Проверки выбранных марок и моделей...

                    // Проверяем попадание цены карточки в выбранный диапазон
                    var price = parseInt($(this).data('price'), 10);
                    var priceMatch = (price >= minPrice) && (price <= maxPrice);

                    // Решаем, показывать карточку или скрыть
                    $(this).toggle(makeMatch && modelMatch && priceMatch);
                });
            }

            // Проверяем значения ползунков, чтобы избежать перекрещивания
            function checkSliders() {
                if (parseInt($min.val()) > parseInt($max.val())) {
                    $min.val($max.val());
                    $max.val($min.val());
                }
                filterList();
            }

            // Привязываем функцию фильтрации к событиям изменения ползунков и флажков
            $('#makeCollapse .form-check-input, #modelCollapse .form-check-input').on('change', filterList);
            $min.on('input change', checkSliders);
            $max.on('input change', checkSliders);

            updateLabels();
        });
    </script>
}